/* -*- mode: c++; coding: utf-8 -*- */
namespace Feel {
/** \page UsingInstalledFeelpp Using an already installed version of Feel++

\tableofcontents

<hr>

This section discusses how to compile an application, when \feel is already installed on your system, through the packaging system notably.

\section IntroductionWithInstalledFeelpp Introduction

In this section, we consider that you installed feel++ through the packaging system of your operating system. Here are a few tips that will help
you with building the applicatins from the tutorial or your applications:
- Check the compiler you are using. You advise you to either use gcc or clang for the compilation process. 
If your system has low RAM memory (<8 GB), prefer using clang. You can specify which compiler you want to use by adding options to the cmake commands
in the following section. The options are the following:
\verbatim
-DCMAKE_C_COMPILER=<c_compiler> -DCMAKE_CXX_COMPILER=<c++_compiler>
\endverbatim
So if for example you want to use clang, you can specify it the following way (if clang is installed in /usr/bin):
\verbatim
cmake <path_to_source_code> -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++
\endverbatim

- Compile in Release mode. Feel++ applications can bew compiled in several modes: Debug, RelWithDebInfo, Release. Prefer the Release version to decrease
compilation time. To change the compilation module, add the following option to the cmake step (e.g. Release mode):
\verbatim
-DCMAKE_BUILD_TYPE=Release
\endverbatim

\section BuildTutoWithInstalledFeelpp Building the examples from the tutorial

If you want to build the examples from \feel tutorial:

\verbatim
# make a directory for the executables
mkdir feelpp-tutorial
cd feelpp-tutorial
# build the tutorial
cmake /usr/share/doc/feel++-doc/examples
# Adapt the number of processors you want to use
make -j 10
\endverbatim

You can then launch the applications:

\verbatim
./feelpp_doc_myintegrals
\endverbatim

The data exported by the application will be located in the $FEELPP_WORKDIR directory.
If the environment variable $FEELPP_WORKDIR is not set, they will be in ~/feel.

Optionally retrieve data from the server (e.g. irma-atlas):

\verbatim
mkdir feel
cd feel
# To retrieve the data associated to application mymesh
rsync -avz <login>@irma-atlas.u-strasbg.fr:/home/atlas_home/<login>/feel/mymesh ./
\endverbatim

<a href="#" class="top">top</a>
<hr>

\section BuildOwnAppUsingInstalledFeelpp Building your own application myapp

If you want to create your own application and compile it to use \feel, you must first create a CMakeLists.txt file with the following content:

\verbatim
cmake_minimum_required(VERSION 2.8)
find_path(FEELPP_CMAKE_MODULES FindFeel++.cmake PATHS /usr/share/feel/cmake/modules/ /usr/local/share/feel/cmake/modules/ )
if(FEELPP_CMAKE_MODULES)
    set(CMAKE_MODULE_PATH ${FEELPP_CMAKE_MODULES})
else()
    message(FATAL_ERROR "Feel++ does not seem to have been installed on this platform")
endif()
find_package(Feel++)
feelpp_add_application(<appname> SRCS <appsrc.cpp> INCLUDE_IN_ALL)
\endverbatim

In this CMakeLists.txt file, you have to specify your application name (<appname>) and the source file corresponding to the application (<appsrc.cpp>).
Then configure your Feel++ application using this command and compile your application according to the resources available:

\verbatim
mkdir build;
cd build
cmake ..
make -j 4
\endverbatim

Here is presented an exemple for an application named loadmesh, built from the source file loadmesh.cpp.
\verbatim
cmake_minimum_required(VERSION 2.8)
find_path(FEELPP_CMAKE_MODULES FindFeel++.cmake PATHS /usr/share/feel/cmake/modules/ /usr/local/share/feel/cmake/modules/ )
if(FEELPP_CMAKE_MODULES)
    set(CMAKE_MODULE_PATH ${FEELPP_CMAKE_MODULES})
else()
    message(FATAL_ERROR "Feel++ does not seem to have been installed on this platform")
endif()
find_package(Feel++)
feelpp_add_application(loadmesh SRCS loadmesh.cpp INCLUDE_IN_ALL)
\endverbatim

The file loadmesh.cpp is a sample C++ file that will allow to load a mesh:

\verbatim
#include <feel/feel.hpp>                                                                                                                                                          

int main( int argc, char** argv )                                                                                                                                                 
{                                                                                                                                                                                 
    using namespace Feel;                                                                                                                                                         
    Environment env( _argc=argc, _argv=argv,                                                                                                                                      
                     _desc=feel_options(),                                                                                                                                        
                     _about=about(_name="loadmesh",                                                                                                                               
                                  _author="Christophe Prud'homme",                                                                                                                
                                  _email="christophe.prudhomme@feelpp.org") );                                                                                                    

    auto mesh = loadMesh( _mesh = new Mesh<Simplex<2>> );                                                                                                                         

    std::cout << "measure =" << std::endl                                                                                                                                         
              << integrate( elements( mesh ), cst( 1. ) ).evaluate() << "\n";                                                                                                     
    std::cout << "surface =" << std::endl                                                                                                                                         
              << integrate( boundaryfaces( mesh ), cst( 1. ) ).evaluate() << "\n";                                                                                                

}                                                                                                                                                                                 
\endverbatim

<a href="#" class="top">top</a>
<hr>

*/
}
